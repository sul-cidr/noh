import React, { Component } from "react";
import { connect } from "react-redux";
import PropTypes from "prop-types";
import Draggable from "react-draggable";
import { setCurrentTime } from "../actionCreators";

class TimelineIndicator extends Component {
  constructor(props) {
    super(props);
    this.state = {
      playedTime: this.calculateCurrentTime(), // milliseconds
      timer: null
    };
<<<<<<< HEAD
    this.tick = this.tick.bind(this);
=======
    this.handleDragStop = this.handleDragStop.bind(this);
>>>>>>> [WIP] Draggable timeline indicator using react-draggable
  }

  componentDidMount() {
    this.setupTimer();
    this.tick();
  }

  componentWillUnmount() {
    clearInterval(this.state.timer);
  }

  setupTimer() {
    const timer = setInterval(this.tick, this.props.interval);
    this.setState({ timer });
  }

  calculateCurrentTime() {
    return 1e3 * this.props.currentTime; // currentTime is given in seconds
  }

  calculateRemainingTime() {
    return this.calculateMaxTime() - this.state.playedTime;
  }

  calculateMaxTime() {
    return 1e3 * this.props.duration; // currentTime is given in seconds
  }

  calculateProgress() {
    return (100 * this.state.playedTime) / this.calculateMaxTime();
  }

  tick() {
    if (this.props.playing) {
      this.setState({
        playedTime: this.state.playedTime + this.props.interval
      });
    } else {
      this.setState({
        playedTime: this.calculateCurrentTime()
      });
    }
    if (this.calculateRemainingTime() <= 0) {
      clearInterval(this.state.timer);
    }
  }

  handleDragStop(event) {
    const element = event.target.parentElement.parentElement;
    const ratio = (event.clientX - element.offsetLeft) / element.offsetWidth;
    const progressInSeconds = this.props.duration * ratio;
    console.log(ratio);
    console.log(progressInSeconds);
    this.props.updateStartTime(progressInSeconds);
  }

  render() {
    return (
      <Draggable axis="x" handle=".time-indicator" onStop={this.handleDragStop}>
        <div className="time-indicator-container">
          <div
            className="time-indicator"
            style={{
              left: `${this.calculateProgress()}%`,
              position: "relative",
              transform: "none"
            }}
          />
        </div>
      </Draggable>
    );
  }
}

TimelineIndicator.propTypes = {
  duration: PropTypes.number.isRequired,
  interval: PropTypes.number,
  currentTime: PropTypes.number.isRequired,
  playing: PropTypes.bool,
  updateStartTime: PropTypes.func
};

TimelineIndicator.defaultProps = {
  interval: 10, // down to the millisecond it behaves erratically
  playing: false,
  updateStartTime: null
};

const mapStateToProps = state => ({
  currentTime: state.currentTime,
  playing: state.isPlaying
});

const mapDispatchToProps = dispatch => ({
  updateStartTime: time => dispatch(setCurrentTime(time))
});

export const Unwrapped = TimelineIndicator;
export default connect(mapStateToProps, mapDispatchToProps)(TimelineIndicator);
